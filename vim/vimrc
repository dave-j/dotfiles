execute pathogen#infect()

set nocompatible
syntax on
filetype plugin on

set tabstop=8
set expandtab
set softtabstop=2
set shiftwidth=2
set shiftround

set autoindent
set number
set relativenumber

set backspace=indent,eol,start
set wrap
set linebreak
set showbreak=â€¦
set ignorecase

set showcmd

set nobackup
set writebackup

set path+=**
set wildmenu

set foldmethod=marker

set cm=blowfish2

if has("gui_running")
  if has("osx")
    set guifont=Monaco:h14
  else
    set guifont=Terminus\ 12
  endif
  set background=light
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
else
  set background=dark
endif

" next/previous tab using C-n and C-p
nmap  :tabn<CR>
nmap  :tabp<CR>

" search {{{
set incsearch
set hlsearch
" hide highlighted search
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
" }}}

" move link up/down using C-k and C-j
map <c-k> kddpk
map <c-j> ddp

" open/close fold using <space>
nnoremap <space> za

nnoremap <F2> :set relativenumber!<CR>:set number!<CR>
nnoremap <F3> :set list!<CR>
nnoremap <F4> :UndotreeToggle<CR>
nnoremap <F5> :syntax sync fromstart<CR>
nnoremap <F6> :call ToggleEllipsisMacros()<CR>

let mapleader=","
"let mapleader="\<Space>"
noremap <Leader>hey :echo "Hey, ho, let's go!"<cr>

" sort -f -t \> -k 2
vmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a= :Tabularize /=<CR>
map <Leader>do :diffoff<CR>
map <Leader>dt :diffthis<CR>
map <Leader>du :diffupdate<CR>
vmap <Leader>ha: :Tabularize /::<CR>
vmap <Leader>ha> :Tabularize /-><CR>
map <Leader>hc :GhcModCheck<CR>
map <Leader>hC :GhcModTypeClear<CR>
map <Leader>hl :GhcModLint<CR>
vmap <Leader>hs !stylish-haskell<CR>
map <Leader>ht :GhcModType<CR>
map <Leader>M :make<CR>
map <Leader>n :cn<CR>
map <Leader>p :cp<CR>

" Emacs-like beginning and end of file
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" asy {{{
augroup filetypedetect
au BufNewFile,BufRead *.asy     setf asy
augroup END
" }}}

" netrw {{{
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
"let g:netrw_liststyle=3
" }}}

" ctrlp {{{
let g:ctrlp_map = '<c-o>'
let g:ctrlp_cmd = 'CtrlP'
" }}}

" MyStatusLine() {{{
function! MyStatusLine()
    let statusline = ""
    " Filename (F -> full, f -> relative)
    let statusline .= "%f"
    " Buffer flags
    let statusline .= "%( %h%1*%m%*%r%w%) "
    " File format and type
    let statusline .= "(%{&ff}%(\/%Y%))"
    " Left/right separator
    let statusline .= "%="
    " Line & column
    let statusline .= "(%l,%c%V) "
    " Character under cursor (decimal)
    let statusline .= "%03.3b "
    " Character under cursor (hexadecimal)
    let statusline .= "0x%02.2B "
    " File progress
    let statusline .= "| %P/%L"
    return statusline
endfunction
"set statusline=%<%f\ 0x%02B\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set statusline=%!MyStatusLine()
set laststatus=2
" }}}

" zip files in disguise {{{
au BufReadCmd *.jar,*.xpi,*.ipa call zip#Browse(expand("<amatch>"))
" }}}

" Ellipsis-macros {{{
function! InstallEllipsisMacros()
  imap ... â€¦
  imap -.. â‹¯
  imap \.. â‹±
  imap /.. â‹°
  imap \|.. â‹®
  echo "Installed ellipsis macros..."
endfunction
function! UninstallEllipsisMacros()
  iunmap ...
  iunmap -..
  iunmap \..
  iunmap /..
  iunmap \|..
  echo "Uninstalled ellipsis macros..."
endfunction
function! ToggleEllipsisMacros()
  if mapcheck("...", "i") == ""
    call InstallEllipsisMacros()
  else
    call UninstallEllipsisMacros()
  endif
endfunction
" }}}
