execute pathogen#infect()

set nocompatible
syntax on
filetype plugin on

set tabstop=8
set expandtab
set softtabstop=2
set shiftwidth=2
set shiftround

set autoindent
set number
set relativenumber
"set hidden
"set splitright
"set gdefault

set backspace=indent,eol,start
set wrap
set linebreak
set showbreak=â€¦
set ignorecase
set smartcase

set showcmd

set nobackup
set writebackup

set path+=**
set wildmenu

set foldmethod=marker

set cm=blowfish2
set dictionary+=/usr/share/dict/words

set clipboard=autoselectplus

if has("gui_running")
  set guioptions=a
  set mouse=a

  if has("osx")
    set guifont=Monaco:h14
    set noantialias
  else
    set guifont=UW\ Ttyp0\ 14
  endif

  colorscheme one
else
  set mouse=
endif

set background=dark

" next/previous tab using C-n and C-p
nmap  :tabn<CR>
nmap  :tabp<CR>

" search {{{
set incsearch
set hlsearch
" hide highlighted search
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
" }}}

" move line up/down using C-k and C-j
map <c-k> kddpk
map <c-j> ddp

" open/close fold using <space>
nnoremap <space> za

function! ToggleList()
  exec('set list!')
  if &colorcolumn==""
    exec('set colorcolumn=+1')
  else
    exec('set colorcolumn=""')
  endif
endfunction

function! ToggleCursorColumnLine()
  if &cursorcolumn == 0
    exec('set cursorcolumn')
    exec('set cursorline')
  else
    exec('set nocursorcolumn')
    exec('set nocursorline')
  endif
endfunction

nnoremap <F2> :set relativenumber!<CR>:set number!<CR>
nnoremap <F3> :call ToggleList()<CR>
nnoremap <F4> :UndotreeToggle<CR>
nnoremap <F5> :syntax sync fromstart<CR>
nnoremap <F6> :call ToggleCursorColumnLine()<CR>
" rotate tab size
nnoremap <silent> <F7> :let &ts=(&ts*2 > 8 ? 2 : &ts*2)<cr>:echo "tabstop:" . &ts<cr>

let mapleader=","
"let mapleader="\<Space>"
noremap <Leader>hey :echo "Hey, ho, let's go!"<cr>

" sort -f -t \> -k 2
vmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a= :Tabularize /=<CR>
map <Leader>do :diffoff<CR>
map <Leader>dt :diffthis<CR>
map <Leader>du :diffupdate<CR>
map <Leader>gb :Gblame<CR>
map <Leader>gd :Gdiff<CR>
map <Leader>gs :Gstatus<CR>
vmap <Leader>ha: :Tabularize /::<CR>
vmap <Leader>ha> :Tabularize /-><CR>
map <Leader>hc :GhcModCheck<CR>
map <Leader>hC :GhcModTypeClear<CR>
map <Leader>hg :GhcModSigCodegen<CR>
map <Leader>hi :GhcModInfo<CR>
map <Leader>hl :GhcModLint<CR>
vmap <Leader>hs !stylish-haskell<CR>
map <Leader>hS :GhcModSplitFunCase<CR>
map <Leader>ht :GhcModType<CR>
map <Leader>M :make<CR>
map <Leader>n :cn<CR>
map <Leader>p :cp<CR>
map <Leader>sw /\s\+$<CR>

" Emacs-like beginning and end of file
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" asy {{{
augroup filetypedetect
au BufNewFile,BufRead *.asy     setf asy
au BufNewFile,BufRead *.expect  setf expect
augroup END
" }}}

" netrw {{{
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
"let g:netrw_liststyle=3
" }}}

" MyStatusLine() {{{
function! MyStatusLine()
    let statusline = ""
    " Filename (F -> full, f -> relative)
    let statusline .= "%f"
    " Buffer flags
    let statusline .= "%( %h%1*%m%*%r%w%) "
    " File format and type
    let statusline .= "(%{&ff}%(\/%Y%))"
    " Left/right separator
    let statusline .= "%="
    " Line & column
    let statusline .= "(%l,%c%V) "
    " Character under cursor (decimal)
    let statusline .= "%03.3b "
    " Character under cursor (hexadecimal)
    let statusline .= "0x%02.2B "
    " File progress
    let statusline .= "| %P/%L"
    return statusline
endfunction
"set statusline=%<%f\ 0x%02B\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set statusline=%!MyStatusLine()
set laststatus=2
" }}}

" zip files in disguise {{{
au BufReadCmd *.jar,*.xpi,*.ipa call zip#Browse(expand("<amatch>"))
" }}}

" Break up inserts into smaller undo-chunks
inoremap . .<c-g>u
inoremap ? ?<c-g>u
inoremap ! !<c-g>u
inoremap , ,<c-g>u

" :h :DiffOrig
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
  \ | wincmd p | diffthis

au BufNewFile,BufRead *.podspec,Podfile setf ruby
autocmd BufNewFile,BufReadPost *.tex set filetype=tex

" Toggle GUI cruft {{{
" https://stackoverflow.com/a/13525844
function! ToggleGUICruft()
  if stridx(&guioptions, 'i') < 0
    exec('set guioptions+=imtTrL')
    exec('set guioptions=imTrL')
  else
    exec('set guioptions=i')
  endif
endfunction
" }}}

" Toggle background using F12 {{{
function! ToggleBackground()
  if &background=='dark'
    exec('set background=light')
  else
    exec('set background=dark')
  endif
endfunction
map <f12> <esc>:call ToggleBackground()<cr>
" }}}

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,WinEnter * if &nu | set rnu   | endif
  autocmd BufLeave,FocusLost,WinLeave   * if &nu | set nornu | endif
augroup END
